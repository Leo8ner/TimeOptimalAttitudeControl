#include <casadi/casadi.hpp>
#include <iostream>
#include <chrono>
#include <toac/helper_functions.h>
#include "test2.h"
#include <cstdlib>

using namespace casadi;

// main function
int main(int argc, char* argv[]) {
    // Check command line arguments
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " \"phi_i,theta_i,psi_i,wx_i,wy_i,wz_i\" \"phi_f,theta_f,psi_f,wx_f,wy_f,wz_f\"" << std::endl;
        return 1;
    }
    
    try {
        // Parse command line arguments
        DM X_0, angles_0;
        std::tie(X_0, angles_0) = parseStateVector(argv[1]);
        DM X_f, angles_f;
        std::tie(X_f, angles_f) = parseStateVector(argv[2]);

        DM X_guess(n_states, n_stp+1), U_guess(n_controls, n_stp), dt_guess(n_stp,1); // Initial guesses for states, controls, and time steps

        PSOOptimizer initial_guess(X_0->data(), X_f->data(), true);
        double w = 1.0; // Inertia weight
        double c1 = 1.5; // Cognitive weight
        double c2 = 1.5; // Social weight
        initial_guess.setPSOParameters(500,1250,w,c1,c2); // Set PSO parameters: iterations, particles, inertia, cognitive, social
        if(!initial_guess.optimize(X_guess, U_guess, dt_guess)) {
            std::cerr << "Error: PSO initial guess optimization failed." << std::endl;
            return -1;
        }

        std::cout << "Initial guess generated by PSO." << std::endl;
        std::cout << "Initial guess state trajectory X_guess:\n" << X_guess << std::endl;
        std::cout << "Initial guess control trajectory U_guess:\n" << U_guess << std::endl;
        std::cout << "Initial guess time steps dt_guess:\n" << dt_guess << std::endl;
        // Start the timer
        
        DMDict result;
        result["T"] = DM(n_stp * dt_guess(0,0));
        result["X"] = X_guess;
        result["U"] = U_guess;
        result["dt"] = dt_guess;

        processResults(result, angles_0, angles_f);
        
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}